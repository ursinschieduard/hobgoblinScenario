#include <fstream>
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <iostream>
#include <limits>
#include <iomanip>
using namespace std;

typedef std::numeric_limits< double > dbl;

ifstream f("robots.in");
ofstream g("robots.out");
float a,b,next[10000][10000],mypath[10000],viz[10000],k,Edge[10000][10000];
double robotX[10000],robotY[10000];
int Component[100000]; char s[1000000];
int n,x,j,m,i,q;
int totalNr;
double VertexX[10000],pointX[10000],pointY[10000],VertexY[10000],dist[10000][10000],finalEdgesX1[10000],finalEdgesX2[10000],finalEdgesY1[10000],finalEdgesY2[10000];
double shroomX[2000][2000],shroomY[2000][2000]; int counterArray[2000];
//only replica for testing
double robotXX[1000],robotYY[1000];
double VertexXX[1000],VertexYY[1000];
int order[10000],nrOrder;
double strict_str2double(char* str)
{
    char* endptr;
    double value = strtod(str, &endptr);
    if (*endptr) return 0;
    return value;
}

char makotek[10000];

int nrObstacles,counter,poz;
int Obstacle[100000],tracker;

float getDistance(double a, double b, double x , double y)
{ double c;
  c = sqrt((x - a)*(x - a)+ (y - b)*(y - b));
  return c;
}

char currChar;double fox,cox; int localcounter;
int nrRobots;
void getMyInput()
{ /*localcounter =1;nrComponent = 1;
    int e;int a = 0; nrRobots = 0;
    char t[1000],y[1000];
    f.getline(s, 1000000);
    for(i=0;i<=strlen(s)-1;i++)
        if(s[i]==' ') strcpy(s+i,s+i+1);

//g<<s;

 i=0;
g<<s;
    while(s[i]!= '#')
        { int alka =0;
          if(s[i] == '(')
                    { a = 0;i++;
                    while(s[i]!= ',')
                    { t[a] = s[i];  a++;   i++;
                    }
                    t[a] = NULL;

                     fox = atof(t) ;

                    if(s[i]==',')
                {
                    a=0;
                    i++;


                    while(s[i]!=')')
                        {
                        y[a] = s[i]; a++; i++; g<<"a";
                        }

                     cox = atof(y);
                    y[a] = NULL;
                i++;
                }
        nrRobots++;
       robotXX[nrRobots]=fox;
       robotYY[nrRobots]=cox;



                    }



         if(s[i] == ',') {
              //  g<<"\n";
             //   g<<"This is the current one:"<<s[i-1]<<s[i-2]<<s[i-3];
                i++;
           }


//          std::cout << std::setprecision(100) << fox << '\n';
        //  i++;
        g<<"\n";

       }


i++;
for(int i = 1; i<=nrRobots;i++)
    g<<robotXX[i]<<" "<<robotYY[i]<<"\n";
    g<<s[i];

while(s[i]!= '*')

     {


        while(s[i]!=';')
        {

          int alka =0;
          if(s[i] == '(')
                    { a = 0;i++;
                        while(s[i]!= ',')
                        {
                        t[a] = s[i]; a++; i++;
                        }
                      t[a] = NULL;
                      fox = atof(t) ;
                      if(s[i]==',')
                {
                    a=0;
                    i++;


                    while(s[i]!=')')
                    {
                    y[a] = s[i];
                    a++;
                    i++;
                    g<<"a";
                }

                    cox = atof(y);
                    y[a] = NULL;

                   //g<<y<<" ";

                    i++;

                }
                    }



         if(s[i] == ',') {
                        i++;
                        }

        g<<"\n";

        g<<"bbb";

   VertexXX[localcounter] = fox;
   VertexYY[localcounter] = cox;
   g<<VertexXX[localcounter]<<"ye";

   ComponentReplica[localcounter] = nrComponent;
   g<<"New Component: "<<ComponentReplica[localcounter]<<"Protected";
   localcounter++;

   g<<fox<<" "<<cox<<"\n";

           }
        i++;
        nrComponent++;
       }
//}


localcounter--;

for(i=1;i<=localcounter;i++)

     g<<"THIS IS THE GOOD STUFF"<<VertexXX[i]<<" "<<VertexYY[i]<<" "<<ComponentReplica[i]<<"\n";
*/
}




void updatePaths()
{ for(q=1;q<=totalNr;q++)
    for(i=1;i<=totalNr;i++)
        for(j=1;j<=totalNr;j++)
          if(dist[i][j]> dist[i][q]+dist[q][j])
             {dist[i][j] = dist[i][q] + dist[q][j];
              next[i][j] = next[i][q];}

}


void Path(int z, int c , int b)
{ g.precision(16);
    int pula;
    //g<<"\n";
    if (next[z][c] == 0) {g<<"wtf";}

    pula = 0;
    g<<"("<<VertexX[z]<<","<<VertexY[z]<<")"<<",";
//    shroom[b][0]++;
   counterArray[b]++;
   shroomX[b][counterArray[b]] = VertexX[z];
   shroomY[b][counterArray[b]] = VertexY[z];
    while(z!=c)
    {


        z = next[z][c];
        g<<"("<<VertexX[z]<<","<<VertexY[z]<<")"<<",";
        counterArray[b]++;
        shroomX[b][counterArray[b]] = VertexX[z];
        shroomY[b][counterArray[b]] = VertexY[z];

    }
  g<<"<-FINISH OF PATH"<<"\n";
}

bool Intersection(float p0_x, float p0_y, float p1_x, float p1_y,
    float p2_x, float p2_y, float p3_x, float p3_y)
{
    float s1_x, s1_y, s2_x, s2_y;
    s1_x = p1_x - p0_x;     s1_y = p1_y - p0_y;
    s2_x = p3_x - p2_x;     s2_y = p3_y - p2_y;

    float s, t;
    s = (-s1_y * (p0_x - p2_x) + s1_x * (p0_y - p2_y)) / (-s2_x * s1_y + s1_x * s2_y);
    t = ( s2_x * (p0_y - p2_y) - s2_y * (p0_x - p2_x)) / (-s2_x * s1_y + s1_x * s2_y);

    if (s >= 0 && s <= 1 && t >= 0 && t <= 1)
    {
        // Collision detected

        return 1;
    }

    return 0; // No collision
}



void createNetwork()
{
    int nrComponent;

 int ComponentReplica[100000];

    //INPUT GETTING
    localcounter =1;nrComponent = 1;
    int e;int a = 0; nrRobots = 0;
    char t[1000],y[1000];
    f.getline(s, 1000000);
    for(i=0;i<=strlen(s)-1;i++)
        if(s[i]==' ') strcpy(s+i,s+i+1);

//g<<s;

 i=0;
//g<<s;
    while(s[i]!= '#')
        { int alka =0;
          if(s[i] == '(')
                    { a = 0;i++;
                    while(s[i]!= ',')
                    { t[a] = s[i];  a++;   i++;
                    }
                    t[a] = NULL;

                     fox = atof(t) ;

                    if(s[i]==',')
                {
                    a=0;
                    i++;


                    while(s[i]!=')')
                        {
                        y[a] = s[i]; a++; i++; //g<<"a";
                        }

                     cox = atof(y);
                    y[a] = NULL;
                i++;
                }
        nrRobots++;

       robotXX[nrRobots]=fox;
       robotYY[nrRobots]=cox;



                    }



         if(s[i] == ',') {
              //  g<<"\n";
             //   g<<"This is the current one:"<<s[i-1]<<s[i-2]<<s[i-3];
                i++;
           }


//          std::cout << std::setprecision(100) << fox << '\n';
        //  i++;
  //      g<<"\n";

       }


i++;


while(s[i]!= '*')

     {  //g<<"New Component:SAFASFSFASFSAFSAFSAFAFASFASFASFASFAF "<<ComponentReplica[localcounter-1]<<"Protected";


        while(s[i]!=';')
        {

          int alka =0;
          if(s[i] == '(')
                    { a = 0;i++;
                        while(s[i]!= ',')
                        {
                        t[a] = s[i]; a++; i++;
                        }
                      t[a] = NULL;
                      fox = atof(t) ;
                      if(s[i]==',')
                {
                    a=0;
                    i++;


                    while(s[i]!=')')
                    {
                    y[a] = s[i];
                    a++;
                    i++;
                //    g<<"a";
                }

                    cox = atof(y);
                    y[a] = NULL;

                   //g<<y<<" ";

                    i++;

                }
                    }



         if(s[i] == ',') {
                        i++;
                        }

      //  g<<"\n";

      //  g<<"bbb";

   VertexXX[localcounter] = fox;
   VertexYY[localcounter] = cox;

  // g<<cox<<" ";
  // g<<VertexXX[localcounter]<<"ye";

   ComponentReplica[localcounter] = nrComponent;
  // g<<"New Component: "<<ComponentReplica[localcounter]<<"Protected";
   localcounter++;

 //  g<<fox<<" "<<cox<<"\n";

           }
        i++;
        nrComponent++;
       }
//}
//g<<ComponentReplica[1];g<<"<------------";

g<<setprecision(10)<<robotX[1]<<"<---a------";
//for(i=1;i<=localcounter;i++)

     //g<<"THIS IS THE GOOD STUFF"<<VertexXX[i]<<" "<<VertexYY[i]<<" "<<ComponentReplica[i]<<"\n";

    //INPUT FINISHED



    f>>x;

  n = nrRobots;
    for(i=1;i<=nrRobots;i++)
        {
            robotX[i] = robotXX[i];
            robotY[i] =robotYY[i];
          //  g<<robotX[i]<<" "<<robotY[i]<<" ";
     //   g<<"saf";
        }


  counter = 1;
    nrObstacles=nrComponent-1;

  //  g<<nrObstacles;
  //  g<<localcounter;

x = localcounter;
//g<<"THIS IS LOCAL COUNTER:"<<localcounter<<" ";

int counterart = 1;
Obstacle[1] = 1;
//g<<"\n";


//g<< "WHAT THE HELL"<<ComponentReplica[1]<<"     ";

for(i=2;i<= x;i++)
{
  counterart++;
    if(ComponentReplica[i]!=ComponentReplica[i-1])
    {
       Obstacle[ComponentReplica[i-1]] = counterart-1;

      //  g<<counterart<<" ";
        counterart = 1;
    }

}


Obstacle[ComponentReplica[x]] = counterart;



//g<<"\n";
//for(i=1;i<=nrObstacles;i++) g<<Obstacle[i]<<" ";
//g<<"\n";


for(i=1;i<=x;i++)

    for(i=1;i<=localcounter;i++) {Component[i]=ComponentReplica[i];//g<<Component[i]<<" ";
    }
  //  g<<"\n";





int p;
   k=1;p=0;
   double q,w;

   totalNr = n+x;
   f>>a;f>>b;
   VertexX[1] = VertexXX[1];
   VertexY[1] = VertexYY[1];
   pointX[p] = i;
   pointY[p] = j;

    for(i=2;i<=x+1;i++)
    {
         if(Component[i]!=Component[i-1]) {k++;
                        p++;
                         poz = i - Obstacle[Component[i-1]];
                         finalEdgesX1[p] = a;
                         finalEdgesX2[p] = VertexX[poz];
                         finalEdgesY1[p] = b;
                         finalEdgesY2[p] = VertexY[poz];
                         Edge[poz][i-1] = 1;
                         Edge[i-1][poz] = 1;
            //             g<<i<<"+"<<i-3<<"\n";
            //             g<<i<<"+"<<poz<<"\n";
                        }
        if(i == x+1) break;
        //int o1,o2;
       // f>>o1;f>>o2;
        VertexX[i] = VertexXX[i];
        VertexY[i] = VertexYY[i];

        if(Component[i] ==Component[i-1])
         {

           p++;
                         finalEdgesX1[p] = a;
                         finalEdgesX2[p] = VertexXX[i];
                         finalEdgesY1[p] = b;
                         finalEdgesY2[p] = VertexYY[i];
                         Edge[i][i-1] = 1;
                         Edge[i-1][i] = 1;
         }

        a=VertexXX[i];
        b=VertexYY[i];
    }

  for(i=x+1;i<=totalNr;i++)
     {
        VertexX[i] = robotX[i-x];
        VertexY[i] = robotY[i-x];
        Component[i]=i;
     }

  // for(i=1;i<=totalNr;i++)
  //      g<<VertexX[i]<<" "<<VertexY[i]<<"\n";


/*
    for(i=1;i<=p;i++)
{


        g<<"("<<finalEdgesX1[i]<<","<<finalEdgesY1[i]<<") ";
        g<<"<-> ";
        g<<"("<<finalEdgesX2[i]<<","<<finalEdgesY2[i]<<") ";
        g<<"\n";
}

*/
 m=p;

 for(i=1;i<=totalNr;i++) g<<Component[i]<<" ";g<<"\n";
for(i=1;i<=totalNr;i++)
        for(j=i+1;j<=totalNr;j++)
            if(Component[i]!=Component[j])
                { int ok = 1;

                    for(int r =1; r<=p; r++)


                     if(Intersection(VertexX[i],VertexY[i],VertexX[j],VertexY[j],
                                      finalEdgesX1[r],finalEdgesY1[r],finalEdgesX2[r],finalEdgesY2[r]) )
                        { if(VertexX[i]==finalEdgesX1[r] && VertexY[i] == finalEdgesY1[r]||
                             VertexX[j]==finalEdgesX1[r] && VertexY[j] == finalEdgesY1[r]||
                             VertexX[i]==finalEdgesX2[r] && VertexY[i] == finalEdgesY2[r]||
                             VertexX[j]==finalEdgesX2[r] && VertexY[j] == finalEdgesY2[r]
                             ) g<<' ';
                             else ok = 0 ;}
                     if(ok == 1)
                     {

                         p++;
                        // g<<"Shoutout";
                         finalEdgesX1[p] = VertexX[i];
                         finalEdgesX2[p] = VertexX[j];
                         finalEdgesY1[p] = VertexY[i];
                         finalEdgesY2[p] = VertexY[j];
                         Edge[i][j] = 1;
                         Edge[j][i] = 1;
                     }
                }

/*
    for(i=1;i<=p;i++)
{


        g<<"("<<finalEdgesX1[i]<<","<<finalEdgesY1[i]<<") ";
        g<<"<-> ";
        g<<"("<<finalEdgesX2[i]<<","<<finalEdgesY2[i]<<") ";
        g<<"\n";

}

*/
/*
        for(i=1;i<= x; i++)
         { for(j=1;j<=x;j++)

            g<<Edge[i][j]<<" ";
            g<<"\n";
        }
*/
         for(i = 1;i <= totalNr; i++)
         { for(j=1;j<=totalNr;j++)
              if(Edge[i][j]) {dist[i][j] = getDistance(VertexX[i],VertexY[i],VertexX[j],VertexY[j]);
                              next[i][j] = j;}
          //  g<<dist[i][j]<<" ";
           // g<<"\n";
        }

        for(i=1;i<=totalNr;i++)
             for(j=1;j<=totalNr;j++) if(dist[i][j]==0 ) dist[i][j] = 1000000;

      updatePaths();
    /*    for(i = 1;i<= totalNr; i++)
         { for(j=1;j<=totalNr;j++)
           g<<next[i][j]<<" ";
           g<<"\n";
        }

*/
g<<"\n";


}

int nrAvailable,Available[100000],Sleeping[100000],nrSleeping;



int findclosest(int Sleep[], int k , int b)
{
    int i; double initialDistance = 10000000; int whichOne = 0;int indexX =0;
    for(i = 1; i<= nrSleeping && Sleep[i]!= -1 ; i++ ) if(dist[k][Sleep[i]]< initialDistance) {whichOne = Sleep[i];initialDistance = dist[k][Sleep[i]];indexX = i;}
  //  g<<indexX<<"<-----THIS IS THE INDEX";
    Path(k,whichOne, b);// g<<k<<" "<<whichOne<<"I AM HERE";
    return indexX;
}

/*int findclosest2(int Sleep[], int k)
{
    int i; double initialDistance = 10000000; int whichOne = 0;int indexX =0;
    for(i = 1; i<= nrSleeping && Sleep[i]!= -1 ; i++ )
        if(dist[k][Sleep[i]]< initialDistance)
            {whichOne = Sleep[i];
             initialDistance = dist[k][Sleep[i]];
             indexX = i;
            }

    Sleep[indexX] = -1;

    Path(k,whichOne);
    return indexX;
}

*/
int robotPoz[100000],alfa;
int main()
{ // g<<setprecision(10)<<VertexX[x+1]<<"<---a---asfsasafas---";
   g.fixed;
 int temp; temp = 1;
   createNetwork();
   g<<setprecision(10)<<VertexX[x+1]<<"<---a-----fdsf-";
  // Path(17,38);
  g<<"\n";
  g<<VertexX[x+1]<<fixed;
  g<<"<-----";
   g<<nrRobots<<" "<<totalNr<<" "<<x<<"\n";

   nrAvailable = 1;
   nrSleeping = nrRobots - 1;
   Available[1] = x + 1;

for( i = 1;i<=1998;i++) counterArray[i] = 0;

// for(int go = 1; go<= totalNr; go++) dist[-1][go] = 100000000;
   for(int alfa = x+1;alfa<= totalNr;alfa++) robotPoz[alfa] = alfa;
 //for(int bv = 1; bv <= totalNr;bv++) g<<VertexY[bv]<<"\n";
// for(int bv = 1; bv <= totalNr;bv++) g<<VertexY[bv]<<"\n";

  for(i=1;i<= nrSleeping;i++) {
                                Sleeping[i] = x + i + 1;
                                //g<<Sleeping[i]<<" "<<VertexX[Sleeping[i]]<<" "<<VertexY[Sleeping[i]]<<"\n";
                                }
//g<<"ABCDSAFASFSAFASFFSAFASFSAFF";


//for(int bv = 1; bv <= totalNr;bv++) g<<VertexY[bv]<<"\n";

 nrOrder = 1;
 order[1] = x + 1;

  while(nrAvailable!= nrRobots)
  {
      //cout<<temp<<" ";


        int closest;
        int counterX;counterX = 0;
        for(i=1;i<=nrAvailable && counterX + nrAvailable < nrRobots;i++)
                                    {
                                        closest = findclosest(Sleeping,robotPoz[Available[i]],Available[i]);
                                  //      g<<Sleeping[closest]<<" "<<closest<<"<------------------";
                                        counterX++;
                                        Available[nrAvailable + counterX] = Sleeping[closest];
                                        nrOrder++;
                                        order[nrOrder] = Sleeping[closest];
                                        robotPoz[Available[i]] = Sleeping[closest];
                                        // Sleeping[closest] = - 1;
                                        for(int beta = closest; beta< nrSleeping;beta++) Sleeping[beta] = Sleeping[beta + 1];
                                        nrSleeping -- ;

                                    }
      nrAvailable = nrAvailable + counterX;
      if(nrAvailable > nrRobots - 10) temp = 2;
      g<<"\n";



 }

g<<"\n";

for(i= x+1;i<=totalNr;i++)
{ //g<<i<<" ";
   if(counterArray[i]!=0)
    for(j=1;j<counterArray[i];j++)
      {
       // g<<"("<<shroomX[i][j]<<","<<shroomY[i][j]<<")"<<" ------->";
        if(shroomX[i][j]==shroomX[i][j+1]&& shroomY[i][j]==shroomY[i][j+1])
        {
            for( int bro=j;bro<counterArray[i];bro++) {
                  shroomX[i][bro]=shroomX[i][bro+1];
                  shroomY[i][bro]=shroomY[i][bro+1];
            }
            counterArray[i]--;
        }
      }
  g<<"\n";
}


for(i= x+1;i<=totalNr;i++)
{
   if(counterArray[i]!=0)
   {
       g<<i<<" ";

    for(j=1;j<counterArray[i];j++)
      {
        g<<"("<<shroomX[i][j]<<","<<shroomY[i][j]<<")"<<" ------->";
      }
 g<<"\n";
}



}

g<<"----------------------------------------------------------------------------------------------";
g<<"\n";

int Con;
for(i=1;i<=nrOrder;i++)
    { Con = order[i];
      for(j=1;j<=counterArray[Con];j++)
        {
            g<<"("<<shroomX[Con][j]<<","<<shroomY[Con][j]<<")";
            if(j!=counterArray[Con]) g<<",";
        }
     g<<";";
     }

 //g<<"-----------------------------------------------";
   //   for(int bv = 1; bv <= totalNr;bv++) g<<VertexY[bv]<<"\n";
    return 0;
}
